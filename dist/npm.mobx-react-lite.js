/*! For license information please see npm.mobx-react-lite.js.LICENSE.txt */
"use strict";(self.webpackChunkfonk_input=self.webpackChunkfonk_input||[]).push([["npm.mobx-react-lite"],{"./node_modules/mobx-react-lite/es/ObserverComponent.js":(e,r,t)=>{t.r(r),t.d(r,{Observer:()=>o});var n=t("./node_modules/mobx-react-lite/es/useObserver.js");function o(e){var r=e.children,t=e.render,o=r||t;return"function"!=typeof o?null:(0,n.useObserver)(o)}function s(e,r,t,n,o){var s="children"===r?"render":"children",a="function"==typeof e[r],i="function"==typeof e[s];return a&&i?new Error("MobX Observer: Do not use children and render in the same time in`"+t):a||i?null:new Error("Invalid prop `"+o+"` of type `"+typeof e[r]+"` supplied to `"+t+"`, expected `function`.")}o.propTypes={children:s,render:s},o.displayName="Observer"},"./node_modules/mobx-react-lite/es/index.js":(e,r,t)=>{t.r(r),t.d(r,{isUsingStaticRendering:()=>i.isUsingStaticRendering,enableStaticRendering:()=>i.enableStaticRendering,observer:()=>u.observer,Observer:()=>c.Observer,useLocalObservable:()=>l.useLocalObservable,useLocalStore:()=>d.useLocalStore,useAsObservableSource:()=>m.useAsObservableSource,clearTimers:()=>b.resetCleanupScheduleForTests,useObserver:()=>f,isObserverBatched:()=>o.isObserverBatched,observerBatching:()=>o.observerBatching,useStaticRendering:()=>v});t("./node_modules/mobx-react-lite/es/utils/assertEnvironment.js");var n=t("./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js"),o=t("./node_modules/mobx-react-lite/es/utils/observerBatching.js"),s=t("./node_modules/mobx-react-lite/es/utils/utils.js"),a=t("./node_modules/mobx-react-lite/es/useObserver.js"),i=t("./node_modules/mobx-react-lite/es/staticRendering.js"),u=t("./node_modules/mobx-react-lite/es/observer.js"),c=t("./node_modules/mobx-react-lite/es/ObserverComponent.js"),l=t("./node_modules/mobx-react-lite/es/useLocalObservable.js"),d=t("./node_modules/mobx-react-lite/es/useLocalStore.js"),m=t("./node_modules/mobx-react-lite/es/useAsObservableSource.js"),b=t("./node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js");function f(e,r){return void 0===r&&(r="observed"),(0,s.useDeprecated)("[mobx-react-lite] 'useObserver(fn)' is deprecated. Use `<Observer>{fn}</Observer>` instead, or wrap the entire component in `observer`."),(0,a.useObserver)(e,r)}function v(e){console.warn("[mobx-react-lite] 'useStaticRendering' is deprecated, use 'enableStaticRendering' instead"),(0,i.enableStaticRendering)(e)}(0,o.observerBatching)(n.unstable_batchedUpdates)},"./node_modules/mobx-react-lite/es/observer.js":(e,r,t)=>{t.r(r),t.d(r,{observer:()=>i});var n=t("./node_modules/react/index.js"),o=t("./node_modules/mobx-react-lite/es/staticRendering.js"),s=t("./node_modules/mobx-react-lite/es/useObserver.js"),a=function(){return(a=Object.assign||function(e){for(var r,t=1,n=arguments.length;t<n;t++)for(var o in r=arguments[t])Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o]);return e}).apply(this,arguments)};function i(e,r){if((0,o.isUsingStaticRendering)())return e;var t,i,c,l=a({forwardRef:!1},r),d=e.displayName||e.name,m=function(r,t){return(0,s.useObserver)((function(){return e(r,t)}),d)};return m.displayName=d,t=l.forwardRef?(0,n.memo)((0,n.forwardRef)(m)):(0,n.memo)(m),i=e,c=t,Object.keys(i).forEach((function(e){u[e]||Object.defineProperty(c,e,Object.getOwnPropertyDescriptor(i,e))})),t.displayName=d,t}var u={$$typeof:!0,render:!0,compare:!0,type:!0}},"./node_modules/mobx-react-lite/es/staticRendering.js":(e,r,t)=>{t.r(r),t.d(r,{enableStaticRendering:()=>o,isUsingStaticRendering:()=>s});var n=!1;function o(e){n=e}function s(){return n}},"./node_modules/mobx-react-lite/es/useAsObservableSource.js":(e,r,t)=>{t.r(r),t.d(r,{useAsObservableSource:()=>i});var n=t("./node_modules/mobx-react-lite/es/utils/utils.js"),o=t("./node_modules/mobx/dist/mobx.esm.js"),s=t("./node_modules/react/index.js"),a=function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,s=t.call(e),a=[];try{for(;(void 0===r||r-- >0)&&!(n=s.next()).done;)a.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=s.return)&&t.call(s)}finally{if(o)throw o.error}}return a};function i(e){(0,n.useDeprecated)("[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.");var r=a((0,s.useState)((function(){return(0,o.observable)(e,{},{deep:!1})})),1)[0];return(0,o.runInAction)((function(){Object.assign(r,e)})),r}},"./node_modules/mobx-react-lite/es/useLocalObservable.js":(e,r,t)=>{t.r(r),t.d(r,{useLocalObservable:()=>s});var n=t("./node_modules/mobx/dist/mobx.esm.js"),o=t("./node_modules/react/index.js");function s(e,r){return(0,o.useState)((function(){return(0,n.observable)(e(),r,{autoBind:!0})}))[0]}},"./node_modules/mobx-react-lite/es/useLocalStore.js":(e,r,t)=>{t.r(r),t.d(r,{useLocalStore:()=>i});var n=t("./node_modules/mobx/dist/mobx.esm.js"),o=t("./node_modules/react/index.js"),s=t("./node_modules/mobx-react-lite/es/utils/utils.js"),a=t("./node_modules/mobx-react-lite/es/useAsObservableSource.js");function i(e,r){(0,s.useDeprecated)("[mobx-react-lite] 'useLocalStore' is deprecated, use 'useLocalObservable' instead.");var t=r&&(0,a.useAsObservableSource)(r);return(0,o.useState)((function(){return(0,n.observable)(e(t),void 0,{autoBind:!0})}))[0]}},"./node_modules/mobx-react-lite/es/useObserver.js":(e,r,t)=>{t.r(r),t.d(r,{useObserver:()=>m});var n=t("./node_modules/mobx/dist/mobx.esm.js"),o=t("./node_modules/react/index.js"),s=t("./node_modules/mobx-react-lite/es/utils/printDebugValue.js"),a=t("./node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js"),i=t("./node_modules/mobx-react-lite/es/staticRendering.js"),u=function(e,r){var t="function"==typeof Symbol&&e[Symbol.iterator];if(!t)return e;var n,o,s=t.call(e),a=[];try{for(;(void 0===r||r-- >0)&&!(n=s.next()).done;)a.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(t=s.return)&&t.call(s)}finally{if(o)throw o.error}}return a};function c(e){return"observer"+e}var l=function(){};function d(){return new l}function m(e,r){if(void 0===r&&(r="observed"),(0,i.isUsingStaticRendering)())return e();var t=u(o.useState(d),1)[0],l=u(o.useState(),2)[1],m=function(){return l([])},b=o.useRef(null);if(!b.current)var f=new n.Reaction(c(r),(function(){v.mounted?m():v.changedBeforeMount=!0})),v=(0,a.addReactionToTrack)(b,f,t);var p,g,x=b.current.reaction;if(o.useDebugValue(x,s.printDebugValue),o.useEffect((function(){return(0,a.recordReactionAsCommitted)(b),b.current?(b.current.mounted=!0,b.current.changedBeforeMount&&(b.current.changedBeforeMount=!1,m())):(b.current={reaction:new n.Reaction(c(r),(function(){m()})),mounted:!0,changedBeforeMount:!1,cleanAt:1/0},m()),function(){b.current.reaction.dispose(),b.current=null}}),[]),x.track((function(){try{p=e()}catch(e){g=e}})),g)throw g;return p}},"./node_modules/mobx-react-lite/es/utils/FinalizationRegistryWrapper.js":(e,r,t)=>{t.r(r),t.d(r,{FinalizationRegistry:()=>n});var n="undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry},"./node_modules/mobx-react-lite/es/utils/assertEnvironment.js":(e,r,t)=>{t.r(r);var n=t("./node_modules/mobx/dist/mobx.esm.js");if(!t("./node_modules/react/index.js").useState)throw new Error("mobx-react-lite requires React with Hooks support");if(!n.makeObservable)throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available")},"./node_modules/mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js":(e,r,t)=>{t.r(r),t.d(r,{createReactionCleanupTrackingUsingFinalizationRegister:()=>o});var n=t("./node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js");function o(e){var r=new Map,t=1,o=new e((function(e){var t=r.get(e);t&&(t.reaction.dispose(),r.delete(e))}));return{addReactionToTrack:function(e,s,a){var i=t++;return o.register(a,i,e),e.current=(0,n.createTrackingData)(s),e.current.finalizationRegistryCleanupToken=i,r.set(i,e.current),e.current},recordReactionAsCommitted:function(e){o.unregister(e),e.current&&e.current.finalizationRegistryCleanupToken&&r.delete(e.current.finalizationRegistryCleanupToken)},forceCleanupTimerToRunNowForTests:function(){},resetCleanupScheduleForTests:function(){}}}},"./node_modules/mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js":(e,r,t)=>{t.r(r),t.d(r,{createTimerBasedReactionCleanupTracking:()=>s});var n=t("./node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js"),o=function(e){var r="function"==typeof Symbol&&Symbol.iterator,t=r&&e[r],n=0;if(t)return t.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(r?"Object is not iterable.":"Symbol.iterator is not defined.")};function s(){var e,r=new Set;function t(){void 0===e&&(e=setTimeout(s,n.CLEANUP_TIMER_LOOP_MILLIS))}function s(){e=void 0;var n=Date.now();r.forEach((function(e){var t=e.current;t&&n>=t.cleanAt&&(t.reaction.dispose(),e.current=null,r.delete(e))})),r.size>0&&t()}return{addReactionToTrack:function(e,o,s){var a;return e.current=(0,n.createTrackingData)(o),a=e,r.add(a),t(),e.current},recordReactionAsCommitted:function(e){r.delete(e)},forceCleanupTimerToRunNowForTests:function(){e&&(clearTimeout(e),s())},resetCleanupScheduleForTests:function(){var t,n;if(r.size>0){try{for(var s=o(r),a=s.next();!a.done;a=s.next()){var i=a.value,u=i.current;u&&(u.reaction.dispose(),i.current=null)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}r.clear()}e&&(clearTimeout(e),e=void 0)}}}},"./node_modules/mobx-react-lite/es/utils/observerBatching.js":(e,r,t)=>{t.r(r),t.d(r,{defaultNoopBatch:()=>o,observerBatching:()=>s,isObserverBatched:()=>a});var n=t("./node_modules/mobx/dist/mobx.esm.js");function o(e){e()}function s(e){e||(e=o,console.warn("[MobX] Failed to get unstable_batched updates from react-dom / react-native")),(0,n.configure)({reactionScheduler:e})}var a=function(){return console.warn("[MobX] Deprecated"),!0}},"./node_modules/mobx-react-lite/es/utils/printDebugValue.js":(e,r,t)=>{t.r(r),t.d(r,{printDebugValue:()=>o});var n=t("./node_modules/mobx/dist/mobx.esm.js");function o(e){return(0,n.getDependencyTree)(e)}},"./node_modules/mobx-react-lite/es/utils/reactBatchedUpdates.js":(e,r,t)=>{t.r(r),t.d(r,{unstable_batchedUpdates:()=>n.unstable_batchedUpdates});var n=t("./node_modules/react-dom/index.js")},"./node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js":(e,r,t)=>{t.r(r),t.d(r,{addReactionToTrack:()=>i,recordReactionAsCommitted:()=>u,resetCleanupScheduleForTests:()=>c,forceCleanupTimerToRunNowForTests:()=>l});var n=t("./node_modules/mobx-react-lite/es/utils/FinalizationRegistryWrapper.js"),o=t("./node_modules/mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js"),s=t("./node_modules/mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js"),a=n.FinalizationRegistry?(0,o.createReactionCleanupTrackingUsingFinalizationRegister)(n.FinalizationRegistry):(0,s.createTimerBasedReactionCleanupTracking)(),i=a.addReactionToTrack,u=a.recordReactionAsCommitted,c=a.resetCleanupScheduleForTests,l=a.forceCleanupTimerToRunNowForTests},"./node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js":(e,r,t)=>{function n(e){return{reaction:e,mounted:!1,changedBeforeMount:!1,cleanAt:Date.now()+o}}t.r(r),t.d(r,{createTrackingData:()=>n,CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS:()=>o,CLEANUP_TIMER_LOOP_MILLIS:()=>s});var o=1e4,s=1e4},"./node_modules/mobx-react-lite/es/utils/utils.js":(e,r,t)=>{t.r(r),t.d(r,{useDeprecated:()=>o});var n=[];function o(e){n.includes(e)||(n.push(e),console.warn(e))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,