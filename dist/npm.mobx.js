/*! For license information please see npm.mobx.js.LICENSE.txt */
"use strict";(self.webpackChunkfonk_input=self.webpackChunkfonk_input||[]).push([["npm.mobx"],{"./node_modules/mobx/dist/mobx.esm.js":(e,t,n)=>{n.r(t),n.d(t,{$mobx:()=>W,FlowCancellationError:()=>pn,ObservableMap:()=>Er,ObservableSet:()=>Cr,Reaction:()=>Ct,_allowStateChanges:()=>ze,_allowStateChangesInsideComputed:()=>Qt,_allowStateReadsEnd:()=>ht,_allowStateReadsStart:()=>ft,_autoAction:()=>$t,_endAction:()=>He,_getAdministration:()=>Jr,_getGlobalState:()=>gt,_interceptReads:()=>Sn,_isComputingDerivation:()=>it,_resetGlobalState:()=>mt,_startAction:()=>qe,action:()=>Jt,autorun:()=>en,comparer:()=>J,computed:()=>Ve,configure:()=>cn,createAtom:()=>Y,defineProperty:()=>Mn,entries:()=>Dn,extendObservable:()=>ln,flow:()=>mn,flowResult:()=>wn,get:()=>In,getAtom:()=>Yr,getDebugName:()=>$r,getDependencyTree:()=>fn,getObserverTree:()=>dn,has:()=>Bn,intercept:()=>xn,isAction:()=>Zt,isBoxedObservable:()=>Je,isComputed:()=>En,isComputedProp:()=>kn,isFlow:()=>An,isFlowCancellationError:()=>bn,isObservable:()=>Cn,isObservableArray:()=>Or,isObservableMap:()=>kr,isObservableObject:()=>Ir,isObservableProp:()=>Rn,isObservableSet:()=>Rr,keys:()=>Pn,makeAutoObservable:()=>sr,makeObservable:()=>or,observable:()=>Re,observe:()=>Kn,onBecomeObserved:()=>on,onBecomeUnobserved:()=>an,onReactionError:()=>Rt,override:()=>ee,ownKeys:()=>Un,reaction:()=>rn,remove:()=>Ln,runInAction:()=>Qt,set:()=>Vn,spy:()=>Kt,toJS:()=>Hn,trace:()=>zn,transaction:()=>Xn,untracked:()=>ut,values:()=>Nn,when:()=>Fn});var r={0:"Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'",1:function(e,t){return"Cannot apply '"+e+"' to '"+t.toString()+"': Field not found."},5:"'keys()' can only be used on observable objects, arrays, sets and maps",6:"'values()' can only be used on observable objects, arrays, sets and maps",7:"'entries()' can only be used on observable objects, arrays and maps",8:"'set()' can only be used on observable objects, arrays and maps",9:"'remove()' can only be used on observable objects, arrays and maps",10:"'has()' can only be used on observable objects, arrays and maps",11:"'get()' can only be used on observable objects, arrays and maps",12:"Invalid annotation",13:"Dynamic observable objects cannot be frozen",14:"Intercept handlers should return nothing or a change object",15:"Observable arrays cannot be frozen",16:"Modification exception: the internal structure of an observable array was changed.",17:function(e,t){return"[mobx.array] Index out of bounds, "+e+" is larger than "+t},18:"mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",19:function(e){return"Cannot initialize from classes that inherit from Map: "+e.constructor.name},20:function(e){return"Cannot initialize map from "+e},21:function(e){return"Cannot convert to map from '"+e+"'"},22:"mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",23:"It is not possible to get index atoms from arrays",24:function(e){return"Cannot obtain administration from "+e},25:function(e,t){return"the entry '"+e+"' does not exist in the observable map '"+t+"'"},26:"please specify a property",27:function(e,t){return"no observable property '"+e.toString()+"' found on the observable object '"+t+"'"},28:function(e){return"Cannot obtain atom from "+e},29:"Expecting some object",30:"invalid action stack. did you forget to finish an action?",31:"missing option for computed: get",32:function(e,t){return"Cycle detected in computation "+e+": "+t},33:function(e){return"The setter of computed value '"+e+"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"},34:function(e){return"[ComputedValue '"+e+"'] It is not possible to assign a new value to a computed value."},35:"There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",36:"isolateGlobalState should be called before MobX is running any reactions",37:function(e){return"[mobx] `observableArray."+e+"()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()."+e+"()` instead"},38:"'ownKeys()' can only be used on observable objects",39:"'defineProperty()' can only be used on observable objects"};function i(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];var o="string"==typeof e?e:r[e];throw"function"==typeof o&&(o=o.apply(null,n)),new Error("[MobX] "+o)}var o={};function a(){return"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:o}var s=Object.assign,u=Object.getOwnPropertyDescriptor,c=Object.defineProperty,l=Object.prototype,f=[];Object.freeze(f);var h={};Object.freeze(h);var d="undefined"!=typeof Proxy,v=Object.toString();function _(){d||i("`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`")}function p(e){yt.verifyProxies&&i("MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to "+e)}function b(){return++yt.mobxGuid}function y(e){var t=!1;return function(){if(!t)return t=!0,e.apply(this,arguments)}}var g=function(){};function m(e){return"function"==typeof e}function O(e){switch(typeof e){case"string":case"symbol":case"number":return!0}return!1}function w(e){return null!==e&&"object"==typeof e}function A(e){var t;if(!w(e))return!1;var n=Object.getPrototypeOf(e);return null==n||(null==(t=n.constructor)?void 0:t.toString())===v}function S(e){var t=null==e?void 0:e.constructor;return!!t&&("GeneratorFunction"===t.name||"GeneratorFunction"===t.displayName)}function x(e,t,n){c(e,t,{enumerable:!1,writable:!0,configurable:!0,value:n})}function j(e,t,n){c(e,t,{enumerable:!1,writable:!1,configurable:!0,value:n})}function E(e,t){var n="isMobX"+e;return t.prototype[n]=!0,function(e){return w(e)&&!0===e[n]}}function k(e){return e instanceof Map}function T(e){return e instanceof Set}var C=void 0!==Object.getOwnPropertySymbols;var R="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:C?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames;function P(e){return"string"==typeof e?e:"symbol"==typeof e?e.toString():new String(e).toString()}function N(e){return null===e?null:"object"==typeof e?""+e:e}function D(e,t){return l.hasOwnProperty.call(e,t)}var V=Object.getOwnPropertyDescriptors||function(e){var t={};return R(e).forEach((function(n){t[n]=u(e,n)})),t};function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(e,t,n){return t&&L(e.prototype,t),n&&L(e,n),e}function I(){return(I=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function M(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function U(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function K(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function G(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return K(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?K(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=e[Symbol.iterator]()).next.bind(n)}var q=Symbol("mobx-stored-annotations");function H(e){return Object.assign((function(t,n){z(t,n,e)}),e)}function z(e,t,n){(D(e,q)||x(e,q,I({},e[q])),te(n)&&!D(e[q],t))&&i("'"+(e.constructor.name+".prototype."+t.toString())+"' is decorated with 'override', but no such decorated member was found on prototype.");!function(e,t,n){if(!te(t)&&D(e[q],n)){var r=e.constructor.name+".prototype."+n.toString(),o=e[q][n].annotationType_;i("Cannot apply '@"+t.annotationType_+"' to '"+r+"':\nThe field is already decorated with '@"+o+"'.\nRe-decorating fields is not allowed.\nUse '@override' decorator for methods overriden by subclass.")}}(e,n,t),te(n)||(e[q][t]=n)}var W=Symbol("mobx administration"),X=function(){function e(e){void 0===e&&(e="Atom@"+b()),this.name_=void 0,this.isPendingUnobservation_=!1,this.isBeingObserved_=!1,this.observers_=new Set,this.diffValue_=0,this.lastAccessedBy_=0,this.lowestObserverState_=$e.NOT_TRACKING_,this.onBOL=void 0,this.onBUOL=void 0,this.name_=e}var t=e.prototype;return t.onBO=function(){this.onBOL&&this.onBOL.forEach((function(e){return e()}))},t.onBUO=function(){this.onBUOL&&this.onBUOL.forEach((function(e){return e()}))},t.reportObserved=function(){return jt(this)},t.reportChanged=function(){St(),Et(this),xt()},t.toString=function(){return this.name_},e}(),F=E("Atom",X);function Y(e,t,n){void 0===t&&(t=g),void 0===n&&(n=g);var r=new X(e);return t!==g&&on(r,t),n!==g&&an(r,n),r}var J={identity:function(e,t){return e===t},structural:function(e,t){return Zr(e,t)},default:function(e,t){return Object.is?Object.is(e,t):e===t?0!==e||1/e==1/t:e!=e&&t!=t},shallow:function(e,t){return Zr(e,t,1)}};function $(e,t,n){return Cn(e)?e:Array.isArray(e)?Re.array(e,{name:n}):A(e)?Re.object(e,void 0,{name:n}):k(e)?Re.map(e,{name:n}):T(e)?Re.set(e,{name:n}):"function"!=typeof e||Zt(e)||An(e)?e:S(e)?mn(e):$t(n,e)}function Q(e){return e}var Z="override",ee=H({annotationType_:Z,make_:function(e,t){e.isPlainObject_&&i("Cannot apply '"+this.annotationType_+"' to '"+e.name_+"."+t.toString()+"':\n'"+this.annotationType_+"' cannot be used on plain objects.");D(e.appliedAnnotations_,t)||i("'"+e.name_+"."+t.toString()+"' is annotated with '"+this.annotationType_+"', but no such annotated member was found on prototype.");return 0},extend_:function(e,t,n,r){i("'"+this.annotationType_+"' can only be used with 'makeObservable'")}});function te(e){return e.annotationType_===Z}function ne(e,t){return{annotationType_:e,options_:t,make_:re,extend_:ie}}function re(e,t,n,r){var i;if(null==(i=this.options_)?void 0:i.bound)return null===this.extend_(e,t,n,!1)?0:1;if(r===e.target_)return null===this.extend_(e,t,n,!1)?0:2;if(Zt(n.value))return 1;var o=oe(e,this,t,n,!1);return c(r,t,o),2}function ie(e,t,n,r){var i=oe(e,this,t,n);return e.defineProperty_(t,i,r)}function oe(e,t,n,r,o){var a,s,u,c,l;void 0===o&&(o=yt.safeDescriptors),function(e,t,n,r){var o=t.annotationType_;m(r.value)||i("Cannot apply '"+o+"' to '"+e.name_+"."+n.toString()+"':\n'"+o+"' can only be used on properties with a function value.")}(e,t,n,r);var f,h=r.value;(null==(a=t.options_)?void 0:a.bound)&&(h=h.bind(null!=(f=e.proxy_)?f:e.target_));return{value:Ke(null!=(s=null==(u=t.options_)?void 0:u.name)?s:n.toString(),h,null!=(c=null==(l=t.options_)?void 0:l.autoAction)&&c),configurable:!o||e.isPlainObject_,enumerable:!1,writable:!o}}function ae(e,t){return{annotationType_:e,options_:t,make_:se,extend_:ue}}function se(e,t,n,r){var i;if(r===e.target_)return null===this.extend_(e,t,n,!1)?0:2;if((null==(i=this.options_)?void 0:i.bound)&&!An(e.target_[t])&&null===this.extend_(e,t,n,!1))return 0;if(An(n.value))return 1;var o=ce(e,this,t,n,!1,!1);return c(r,t,o),2}function ue(e,t,n,r){var i,o=ce(e,this,t,n,null==(i=this.options_)?void 0:i.bound);return e.defineProperty_(t,o,r)}function ce(e,t,n,r,o,a){void 0===a&&(a=yt.safeDescriptors),function(e,t,n,r){var o=t.annotationType_;m(r.value)||i("Cannot apply '"+o+"' to '"+e.name_+"."+n.toString()+"':\n'"+o+"' can only be used on properties with a generator function value.")}(e,t,n,r);var s,u=r.value;o&&(u=u.bind(null!=(s=e.proxy_)?s:e.target_));return{value:mn(u),configurable:!a||e.isPlainObject_,enumerable:!1,writable:!a}}function le(e,t){return{annotationType_:e,options_:t,make_:fe,extend_:he}}function fe(e,t,n){return null===this.extend_(e,t,n,!1)?0:1}function he(e,t,n,r){return function(e,t,n,r){var o=t.annotationType_,a=r.get;a||i("Cannot apply '"+o+"' to '"+e.name_+"."+n.toString()+"':\n'"+o+"' can only be used on getter(+setter) properties.")}(e,this,t,n),e.defineComputedProperty_(t,I({},this.options_,{get:n.get,set:n.set}),r)}function de(e,t){return{annotationType_:e,options_:t,make_:ve,extend_:_e}}function ve(e,t,n){return null===this.extend_(e,t,n,!1)?0:1}function _e(e,t,n,r){var o,a;return function(e,t,n,r){var o=t.annotationType_;"value"in r||i("Cannot apply '"+o+"' to '"+e.name_+"."+n.toString()+"':\n'"+o+"' cannot be used on getter/setter properties")}(e,this,t,n),e.defineObservableProperty_(t,n.value,null!=(o=null==(a=this.options_)?void 0:a.enhancer)?o:$,r)}var pe=be();function be(e){return{annotationType_:"true",options_:e,make_:ye,extend_:ge}}function ye(e,t,n,r){var i,o,a,s;if(n.get)return Ve.make_(e,t,n,r);if(n.set){var u=Ke(t.toString(),n.set);return r===e.target_?null===e.defineProperty_(t,{configurable:!yt.safeDescriptors||e.isPlainObject_,set:u})?0:2:(c(r,t,{configurable:!0,set:u}),2)}if(r!==e.target_&&"function"==typeof n.value)return S(n.value)?((null==(s=this.options_)?void 0:s.autoBind)?mn.bound:mn).make_(e,t,n,r):((null==(a=this.options_)?void 0:a.autoBind)?$t.bound:$t).make_(e,t,n,r);var l,f=!1===(null==(i=this.options_)?void 0:i.deep)?Re.ref:Re;"function"==typeof n.value&&(null==(o=this.options_)?void 0:o.autoBind)&&(n.value=n.value.bind(null!=(l=e.proxy_)?l:e.target_));return f.make_(e,t,n,r)}function ge(e,t,n,r){var i,o,a;if(n.get)return Ve.extend_(e,t,n,r);if(n.set)return e.defineProperty_(t,{configurable:!yt.safeDescriptors||e.isPlainObject_,set:Ke(t.toString(),n.set)},r);"function"==typeof n.value&&(null==(i=this.options_)?void 0:i.autoBind)&&(n.value=n.value.bind(null!=(a=e.proxy_)?a:e.target_));return(!1===(null==(o=this.options_)?void 0:o.deep)?Re.ref:Re).extend_(e,t,n,r)}var me={deep:!0,name:void 0,defaultDecorator:void 0,proxy:!0};function Oe(e){return e||me}Object.freeze(me);var we=de("observable"),Ae=de("observable.ref",{enhancer:Q}),Se=de("observable.shallow",{enhancer:function(e,t,n){return null==e||Ir(e)||Or(e)||kr(e)||Rr(e)?e:Array.isArray(e)?Re.array(e,{name:n,deep:!1}):A(e)?Re.object(e,void 0,{name:n,deep:!1}):k(e)?Re.map(e,{name:n,deep:!1}):T(e)?Re.set(e,{name:n,deep:!1}):void i("The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets")}}),xe=de("observable.struct",{enhancer:function(e,t){return Cn(e)&&i("observable.struct should not be used with observable values"),Zr(e,t)?t:e}}),je=H(we);function Ee(e){return!0===e.deep?$:!1===e.deep?Q:(t=e.defaultDecorator)&&null!=(n=null==(r=t.options_)?void 0:r.enhancer)?n:$;var t,n,r}function ke(e,t,n){if(!O(t))return Cn(e)?e:A(e)?Re.object(e,t,n):Array.isArray(e)?Re.array(e,t):k(e)?Re.map(e,t):T(e)?Re.set(e,t):"object"==typeof e&&null!==e?e:Re.box(e,t);z(e,t,we)}Object.assign(ke,je);var Te,Ce,Re=s(ke,{box:function(e,t){var n=Oe(t);return new Ye(e,Ee(n),n.name,!0,n.equals)},array:function(e,t){var n=Oe(t);return(!1===yt.useProxies||!1===n.proxy?Fr:hr)(e,Ee(n),n.name)},map:function(e,t){var n=Oe(t);return new Er(e,Ee(n),n.name)},set:function(e,t){var n=Oe(t);return new Cr(e,Ee(n),n.name)},object:function(e,t,n){return ln(!1===yt.useProxies||!1===(null==n?void 0:n.proxy)?Vr({},n):function(e,t){var n,r;return _(),e=Vr(e,t),null!=(r=(n=e[W]).proxy_)?r:n.proxy_=new Proxy(e,Qn)}({},n),e,t)},ref:H(Ae),shallow:H(Se),deep:je,struct:H(xe)}),Pe="computed",Ne=le(Pe),De=le("computed.struct",{equals:J.structural}),Ve=function(e,t){if(O(t))return z(e,t,Ne);if(A(e))return H(le(Pe,e));m(e)||i("First argument to `computed` should be an expression."),m(t)&&i("A setter as second argument is no longer supported, use `{ set: fn }` option instead");var n=A(t)?t:{};return n.get=e,n.name||(n.name=e.name||""),new Ze(n)};Object.assign(Ve,Ne),Ve.struct=H(De);var Le,Be=0,Ie=1,Me=null!=(Te=null==(Ce=u((function(){}),"name"))?void 0:Ce.configurable)&&Te,Ue={value:"action",configurable:!0,writable:!1,enumerable:!1};function Ke(e,t,n,r){function o(){return Ge(e,n,t,r||this,arguments)}return void 0===n&&(n=!1),m(t)||i("`action` can only be invoked on functions"),"string"==typeof e&&e||i("actions should have valid names, got: '"+e+"'"),o.isMobxAction=!0,Me&&(Ue.value=e,Object.defineProperty(o,"name",Ue)),o}function Ge(e,t,n,r,i){var o=qe(e,t,r,i);try{return n.apply(r,i)}catch(e){throw o.error_=e,e}finally{He(o)}}function qe(e,t,n,r){var i=Lt()&&!!e,o=0;if(i){o=Date.now();var a=r?Array.from(r):f;It({type:Gt,name:e,object:n,arguments:a})}var s=yt.trackingDerivation,u=!t||!s;St();var c=yt.allowStateChanges;u&&(ct(),c=We(!0));var l={runAsAction_:u,prevDerivation_:s,prevAllowStateChanges_:c,prevAllowStateReads_:ft(!0),notifySpy_:i,startTime_:o,actionId_:Ie++,parentActionId_:Be};return Be=l.actionId_,l}function He(e){Be!==e.actionId_&&i(30),Be=e.parentActionId_,void 0!==e.error_&&(yt.suppressReactionErrors=!0),Xe(e.prevAllowStateChanges_),ht(e.prevAllowStateReads_),xt(),e.runAsAction_&&lt(e.prevDerivation_),e.notifySpy_&&Ut({time:Date.now()-e.startTime_}),yt.suppressReactionErrors=!1}function ze(e,t){var n=We(e);try{return t()}finally{Xe(n)}}function We(e){var t=yt.allowStateChanges;return yt.allowStateChanges=e,t}function Xe(e){yt.allowStateChanges=e}Le=Symbol.toPrimitive;var Fe,Ye=function(e){function t(t,n,r,i,o){var a;return void 0===r&&(r="ObservableValue@"+b()),void 0===i&&(i=!0),void 0===o&&(o=J.default),(a=e.call(this,r)||this).enhancer=void 0,a.name_=void 0,a.equals=void 0,a.hasUnreportedChange_=!1,a.interceptors_=void 0,a.changeListeners_=void 0,a.value_=void 0,a.dehancer=void 0,a.enhancer=n,a.name_=r,a.equals=o,a.value_=n(t,void 0,r),i&&Lt()&&Bt({type:"create",object:U(a),observableKind:"value",debugObjectName:a.name_,newValue:""+a.value_}),a}M(t,e);var n=t.prototype;return n.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},n.set=function(e){var t=this.value_;if((e=this.prepareNewValue_(e))!==yt.UNCHANGED){var n=Lt();n&&It({type:cr,object:this,observableKind:"value",debugObjectName:this.name_,newValue:e,oldValue:t}),this.setNewValue_(e),n&&Ut()}},n.prepareNewValue_=function(e){if(ot(this),Zn(this)){var t=tr(this,{object:this,type:cr,newValue:e});if(!t)return yt.UNCHANGED;e=t.newValue}return e=this.enhancer(e,this.value_,this.name_),this.equals(this.value_,e)?yt.UNCHANGED:e},n.setNewValue_=function(e){var t=this.value_;this.value_=e,this.reportChanged(),nr(this)&&ir(this,{type:cr,object:this,newValue:e,oldValue:t})},n.get=function(){return this.reportObserved(),this.dehanceValue(this.value_)},n.intercept_=function(e){return er(this,e)},n.observe_=function(e,t){return t&&e({observableKind:"value",debugObjectName:this.name_,object:this,type:cr,newValue:this.value_,oldValue:void 0}),rr(this,e)},n.raw=function(){return this.value_},n.toJSON=function(){return this.get()},n.toString=function(){return this.name_+"["+this.value_+"]"},n.valueOf=function(){return N(this.get())},n[Le]=function(){return this.valueOf()},t}(X),Je=E("ObservableValue",Ye);Fe=Symbol.toPrimitive;var $e,Qe,Ze=function(){function e(e){this.dependenciesState_=$e.NOT_TRACKING_,this.observing_=[],this.newObserving_=null,this.isBeingObserved_=!1,this.isPendingUnobservation_=!1,this.observers_=new Set,this.diffValue_=0,this.runId_=0,this.lastAccessedBy_=0,this.lowestObserverState_=$e.UP_TO_DATE_,this.unboundDepsCount_=0,this.value_=new tt(null),this.name_=void 0,this.triggeredBy_=void 0,this.isComputing_=!1,this.isRunningSetter_=!1,this.derivation=void 0,this.setter_=void 0,this.isTracing_=Qe.NONE,this.scope_=void 0,this.equals_=void 0,this.requiresReaction_=void 0,this.keepAlive_=void 0,this.onBOL=void 0,this.onBUOL=void 0,e.get||i(31),this.derivation=e.get,this.name_=e.name||"ComputedValue@"+b(),e.set&&(this.setter_=Ke(this.name_+"-setter",e.set)),this.equals_=e.equals||(e.compareStructural||e.struct?J.structural:J.default),this.scope_=e.context,this.requiresReaction_=!!e.requiresReaction,this.keepAlive_=!!e.keepAlive}var t=e.prototype;return t.onBecomeStale_=function(){!function(e){if(e.lowestObserverState_!==$e.UP_TO_DATE_)return;e.lowestObserverState_=$e.POSSIBLY_STALE_,e.observers_.forEach((function(e){e.dependenciesState_===$e.UP_TO_DATE_&&(e.dependenciesState_=$e.POSSIBLY_STALE_,e.onBecomeStale_())}))}(this)},t.onBO=function(){this.onBOL&&this.onBOL.forEach((function(e){return e()}))},t.onBUO=function(){this.onBUOL&&this.onBUOL.forEach((function(e){return e()}))},t.get=function(){if(this.isComputing_&&i(32,this.name_,this.derivation),0!==yt.inBatch||0!==this.observers_.size||this.keepAlive_){if(jt(this),rt(this)){var e=yt.trackingContext;this.keepAlive_&&!e&&(yt.trackingContext=this),this.trackAndCompute()&&function(e){if(e.lowestObserverState_===$e.STALE_)return;e.lowestObserverState_=$e.STALE_,e.observers_.forEach((function(t){t.dependenciesState_===$e.POSSIBLY_STALE_?(t.dependenciesState_=$e.STALE_,t.isTracing_!==Qe.NONE&&kt(t,e)):t.dependenciesState_===$e.UP_TO_DATE_&&(e.lowestObserverState_=$e.UP_TO_DATE_)}))}(this),yt.trackingContext=e}}else rt(this)&&(this.warnAboutUntrackedRead_(),St(),this.value_=this.computeValue_(!1),xt());var t=this.value_;if(nt(t))throw t.cause;return t},t.set=function(e){if(this.setter_){this.isRunningSetter_&&i(33,this.name_),this.isRunningSetter_=!0;try{this.setter_.call(this.scope_,e)}finally{this.isRunningSetter_=!1}}else i(34,this.name_)},t.trackAndCompute=function(){var e=this.value_,t=this.dependenciesState_===$e.NOT_TRACKING_,n=this.computeValue_(!0);Lt()&&Bt({observableKind:"computed",debugObjectName:this.name_,object:this.scope_,type:"update",oldValue:this.value_,newValue:n});var r=t||nt(e)||nt(n)||!this.equals_(e,n);return r&&(this.value_=n),r},t.computeValue_=function(e){this.isComputing_=!0;var t,n=We(!1);if(e)t=at(this,this.derivation,this.scope_);else if(!0===yt.disableErrorBoundaries)t=this.derivation.call(this.scope_);else try{t=this.derivation.call(this.scope_)}catch(e){t=new tt(e)}return Xe(n),this.isComputing_=!1,t},t.suspend_=function(){this.keepAlive_||(st(this),this.value_=void 0,this.isTracing_!==Qe.NONE&&console.log("[mobx.trace] Computed value '"+this.name_+"' was suspended and it will recompute on the next access."))},t.observe_=function(e,t){var n=this,r=!0,i=void 0;return en((function(){var o=n.get();if(!r||t){var a=ct();e({observableKind:"computed",debugObjectName:n.name_,type:cr,object:n,newValue:o,oldValue:i}),lt(a)}r=!1,i=o}))},t.warnAboutUntrackedRead_=function(){this.isTracing_!==Qe.NONE&&console.log("[mobx.trace] Computed value '"+this.name_+"' is being read outside a reactive context. Doing a full recompute."),(yt.computedRequiresReaction||this.requiresReaction_)&&console.warn("[mobx] Computed value '"+this.name_+"' is being read outside a reactive context. Doing a full recompute.")},t.toString=function(){return this.name_+"["+this.derivation.toString()+"]"},t.valueOf=function(){return N(this.get())},t[Fe]=function(){return this.valueOf()},e}(),et=E("ComputedValue",Ze);!function(e){e[e.NOT_TRACKING_=-1]="NOT_TRACKING_",e[e.UP_TO_DATE_=0]="UP_TO_DATE_",e[e.POSSIBLY_STALE_=1]="POSSIBLY_STALE_",e[e.STALE_=2]="STALE_"}($e||($e={})),function(e){e[e.NONE=0]="NONE",e[e.LOG=1]="LOG",e[e.BREAK=2]="BREAK"}(Qe||(Qe={}));var tt=function(e){this.cause=void 0,this.cause=e};function nt(e){return e instanceof tt}function rt(e){switch(e.dependenciesState_){case $e.UP_TO_DATE_:return!1;case $e.NOT_TRACKING_:case $e.STALE_:return!0;case $e.POSSIBLY_STALE_:for(var t=ft(!0),n=ct(),r=e.observing_,i=r.length,o=0;o<i;o++){var a=r[o];if(et(a)){if(yt.disableErrorBoundaries)a.get();else try{a.get()}catch(e){return lt(n),ht(t),!0}if(e.dependenciesState_===$e.STALE_)return lt(n),ht(t),!0}}return dt(e),lt(n),ht(t),!1}}function it(){return null!==yt.trackingDerivation}function ot(e){var t=e.observers_.size>0;yt.allowStateChanges||!t&&"always"!==yt.enforceActions||console.warn("[MobX] "+(yt.enforceActions?"Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: ":"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ")+e.name_)}function at(e,t,n){var r=ft(!0);dt(e),e.newObserving_=new Array(e.observing_.length+100),e.unboundDepsCount_=0,e.runId_=++yt.runId;var i,o=yt.trackingDerivation;if(yt.trackingDerivation=e,yt.inBatch++,!0===yt.disableErrorBoundaries)i=t.call(n);else try{i=t.call(n)}catch(e){i=new tt(e)}return yt.inBatch--,yt.trackingDerivation=o,function(e){for(var t=e.observing_,n=e.observing_=e.newObserving_,r=$e.UP_TO_DATE_,i=0,o=e.unboundDepsCount_,a=0;a<o;a++){var s=n[a];0===s.diffValue_&&(s.diffValue_=1,i!==a&&(n[i]=s),i++),s.dependenciesState_>r&&(r=s.dependenciesState_)}n.length=i,e.newObserving_=null,o=t.length;for(;o--;){var u=t[o];0===u.diffValue_&&wt(u,e),u.diffValue_=0}for(;i--;){var c=n[i];1===c.diffValue_&&(c.diffValue_=0,Ot(c,e))}r!==$e.UP_TO_DATE_&&(e.dependenciesState_=r,e.onBecomeStale_())}(e),function(e){0;if(0!==e.observing_.length)return;(yt.reactionRequiresObservable||e.requiresObservable_)&&console.warn("[mobx] Derivation '"+e.name_+"' is created/updated without reading any observable value.")}(e),ht(r),i}function st(e){var t=e.observing_;e.observing_=[];for(var n=t.length;n--;)wt(t[n],e);e.dependenciesState_=$e.NOT_TRACKING_}function ut(e){var t=ct();try{return e()}finally{lt(t)}}function ct(){var e=yt.trackingDerivation;return yt.trackingDerivation=null,e}function lt(e){yt.trackingDerivation=e}function ft(e){var t=yt.allowStateReads;return yt.allowStateReads=e,t}function ht(e){yt.allowStateReads=e}function dt(e){if(e.dependenciesState_!==$e.UP_TO_DATE_){e.dependenciesState_=$e.UP_TO_DATE_;for(var t=e.observing_,n=t.length;n--;)t[n].lowestObserverState_=$e.UP_TO_DATE_}}var vt=["mobxGuid","spyListeners","enforceActions","computedRequiresReaction","reactionRequiresObservable","observableRequiresReaction","allowStateReads","disableErrorBoundaries","runId","UNCHANGED","useProxies"],_t=function(){this.version=6,this.UNCHANGED={},this.trackingDerivation=null,this.trackingContext=null,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!1,this.allowStateReads=!0,this.enforceActions=!0,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.reactionRequiresObservable=!1,this.observableRequiresReaction=!1,this.disableErrorBoundaries=!1,this.suppressReactionErrors=!1,this.useProxies=!0,this.verifyProxies=!1,this.safeDescriptors=!0},pt=!0,bt=!1,yt=function(){var e=a();return e.__mobxInstanceCount>0&&!e.__mobxGlobals&&(pt=!1),e.__mobxGlobals&&e.__mobxGlobals.version!==(new _t).version&&(pt=!1),pt?e.__mobxGlobals?(e.__mobxInstanceCount+=1,e.__mobxGlobals.UNCHANGED||(e.__mobxGlobals.UNCHANGED={}),e.__mobxGlobals):(e.__mobxInstanceCount=1,e.__mobxGlobals=new _t):(setTimeout((function(){bt||i(35)}),1),new _t)}();function gt(){return yt}function mt(){var e=new _t;for(var t in e)-1===vt.indexOf(t)&&(yt[t]=e[t]);yt.allowStateChanges=!yt.enforceActions}function Ot(e,t){e.observers_.add(t),e.lowestObserverState_>t.dependenciesState_&&(e.lowestObserverState_=t.dependenciesState_)}function wt(e,t){e.observers_.delete(t),0===e.observers_.size&&At(e)}function At(e){!1===e.isPendingUnobservation_&&(e.isPendingUnobservation_=!0,yt.pendingUnobservations.push(e))}function St(){yt.inBatch++}function xt(){if(0==--yt.inBatch){Nt();for(var e=yt.pendingUnobservations,t=0;t<e.length;t++){var n=e[t];n.isPendingUnobservation_=!1,0===n.observers_.size&&(n.isBeingObserved_&&(n.isBeingObserved_=!1,n.onBUO()),n instanceof Ze&&n.suspend_())}yt.pendingUnobservations=[]}}function jt(e){!function(e){!yt.allowStateReads&&yt.observableRequiresReaction&&console.warn("[mobx] Observable '"+e.name_+"' being read outside a reactive context.")}(e);var t=yt.trackingDerivation;return null!==t?(t.runId_!==e.lastAccessedBy_&&(e.lastAccessedBy_=t.runId_,t.newObserving_[t.unboundDepsCount_++]=e,!e.isBeingObserved_&&yt.trackingContext&&(e.isBeingObserved_=!0,e.onBO())),!0):(0===e.observers_.size&&yt.inBatch>0&&At(e),!1)}function Et(e){e.lowestObserverState_!==$e.STALE_&&(e.lowestObserverState_=$e.STALE_,e.observers_.forEach((function(t){t.dependenciesState_===$e.UP_TO_DATE_&&(t.isTracing_!==Qe.NONE&&kt(t,e),t.onBecomeStale_()),t.dependenciesState_=$e.STALE_})))}function kt(e,t){if(console.log("[mobx.trace] '"+e.name_+"' is invalidated due to a change in: '"+t.name_+"'"),e.isTracing_===Qe.BREAK){var n=[];Tt(fn(e),n,1),new Function("debugger;\n/*\nTracing '"+e.name_+"'\n\nYou are entering this break point because derivation '"+e.name_+"' is being traced and '"+t.name_+"' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n"+(e instanceof Ze?e.derivation.toString().replace(/[*]\//g,"/"):"")+"\n\nThe dependencies for this derivation are:\n\n"+n.join("\n")+"\n*/\n    ")()}}function Tt(e,t,n){t.length>=1e3?t.push("(and many more)"):(t.push(""+new Array(n).join("\t")+e.name),e.dependencies&&e.dependencies.forEach((function(e){return Tt(e,t,n+1)})))}var Ct=function(){function e(e,t,n,r){void 0===e&&(e="Reaction@"+b()),void 0===r&&(r=!1),this.name_=void 0,this.onInvalidate_=void 0,this.errorHandler_=void 0,this.requiresObservable_=void 0,this.observing_=[],this.newObserving_=[],this.dependenciesState_=$e.NOT_TRACKING_,this.diffValue_=0,this.runId_=0,this.unboundDepsCount_=0,this.isDisposed_=!1,this.isScheduled_=!1,this.isTrackPending_=!1,this.isRunning_=!1,this.isTracing_=Qe.NONE,this.name_=e,this.onInvalidate_=t,this.errorHandler_=n,this.requiresObservable_=r}var t=e.prototype;return t.onBecomeStale_=function(){this.schedule_()},t.schedule_=function(){this.isScheduled_||(this.isScheduled_=!0,yt.pendingReactions.push(this),Nt())},t.isScheduled=function(){return this.isScheduled_},t.runReaction_=function(){if(!this.isDisposed_){St(),this.isScheduled_=!1;var e=yt.trackingContext;if(yt.trackingContext=this,rt(this)){this.isTrackPending_=!0;try{this.onInvalidate_(),this.isTrackPending_&&Lt()&&Bt({name:this.name_,type:"scheduled-reaction"})}catch(e){this.reportExceptionInDerivation_(e)}}yt.trackingContext=e,xt()}},t.track=function(e){if(!this.isDisposed_){St();var t,n=Lt();n&&(t=Date.now(),It({name:this.name_,type:"reaction"})),this.isRunning_=!0;var r=yt.trackingContext;yt.trackingContext=this;var i=at(this,e,void 0);yt.trackingContext=r,this.isRunning_=!1,this.isTrackPending_=!1,this.isDisposed_&&st(this),nt(i)&&this.reportExceptionInDerivation_(i.cause),n&&Ut({time:Date.now()-t}),xt()}},t.reportExceptionInDerivation_=function(e){var t=this;if(this.errorHandler_)this.errorHandler_(e,this);else{if(yt.disableErrorBoundaries)throw e;var n="[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '"+this+"'";yt.suppressReactionErrors?console.warn("[mobx] (error in reaction '"+this.name_+"' suppressed, fix error of causing action below)"):console.error(n,e),Lt()&&Bt({type:"error",name:this.name_,message:n,error:""+e}),yt.globalReactionErrorHandlers.forEach((function(n){return n(e,t)}))}},t.dispose=function(){this.isDisposed_||(this.isDisposed_=!0,this.isRunning_||(St(),st(this),xt()))},t.getDisposer_=function(){var e=this.dispose.bind(this);return e[W]=this,e},t.toString=function(){return"Reaction["+this.name_+"]"},t.trace=function(e){void 0===e&&(e=!1),zn(this,e)},e}();function Rt(e){return yt.globalReactionErrorHandlers.push(e),function(){var t=yt.globalReactionErrorHandlers.indexOf(e);t>=0&&yt.globalReactionErrorHandlers.splice(t,1)}}var Pt=function(e){return e()};function Nt(){yt.inBatch>0||yt.isRunningReactions||Pt(Dt)}function Dt(){yt.isRunningReactions=!0;for(var e=yt.pendingReactions,t=0;e.length>0;){100==++t&&(console.error("Reaction doesn't converge to a stable state after 100 iterations. Probably there is a cycle in the reactive function: "+e[0]),e.splice(0));for(var n=e.splice(0),r=0,i=n.length;r<i;r++)n[r].runReaction_()}yt.isRunningReactions=!1}var Vt=E("Reaction",Ct);function Lt(){return!!yt.spyListeners.length}function Bt(e){if(yt.spyListeners.length)for(var t=yt.spyListeners,n=0,r=t.length;n<r;n++)t[n](e)}function It(e){Bt(I({},e,{spyReportStart:!0}))}var Mt={type:"report-end",spyReportEnd:!0};function Ut(e){Bt(e?I({},e,{type:"report-end",spyReportEnd:!0}):Mt)}function Kt(e){return yt.spyListeners.push(e),y((function(){yt.spyListeners=yt.spyListeners.filter((function(t){return t!==e}))}))}var Gt="action",qt="autoAction",Ht="<unnamed action>",zt=ne(Gt),Wt=ne("action.bound",{bound:!0}),Xt=ne(qt,{autoAction:!0}),Ft=ne("autoAction.bound",{autoAction:!0,bound:!0});function Yt(e){return function(t,n){return m(t)?Ke(t.name||Ht,t,e):m(n)?Ke(t,n,e):O(n)?z(t,n,e?Xt:zt):O(t)?H(ne(e?qt:Gt,{name:t,autoAction:e})):void i("Invalid arguments for `action`")}}var Jt=Yt(!1);Object.assign(Jt,zt);var $t=Yt(!0);function Qt(e){return Ge(e.name||Ht,!1,e,this,void 0)}function Zt(e){return m(e)&&!0===e.isMobxAction}function en(e,t){var n,r;void 0===t&&(t=h),m(e)||i("Autorun expects a function as first argument"),Zt(e)&&i("Autorun does not accept actions since actions are untrackable");var o,a=null!=(n=null==(r=t)?void 0:r.name)?n:e.name||"Autorun@"+b();if(!t.scheduler&&!t.delay)o=new Ct(a,(function(){this.track(c)}),t.onError,t.requiresObservable);else{var s=nn(t),u=!1;o=new Ct(a,(function(){u||(u=!0,s((function(){u=!1,o.isDisposed_||o.track(c)})))}),t.onError,t.requiresObservable)}function c(){e(o)}return o.schedule_(),o.getDisposer_()}Object.assign($t,Xt),Jt.bound=H(Wt),$t.bound=H(Ft);var tn=function(e){return e()};function nn(e){return e.scheduler?e.scheduler:e.delay?function(t){return setTimeout(t,e.delay)}:tn}function rn(e,t,n){var r;void 0===n&&(n=h),m(e)&&m(t)||i("First and second argument to reaction should be functions"),A(n)||i("Third argument of reactions should be an object");var o,a,s,u=null!=(r=n.name)?r:"Reaction@"+b(),c=Jt(u,n.onError?(o=n.onError,a=t,function(){try{return a.apply(this,arguments)}catch(e){o.call(this,e)}}):t),l=!n.scheduler&&!n.delay,f=nn(n),d=!0,v=!1,_=void 0,p=n.compareStructural?J.structural:n.equals||J.default,y=new Ct(u,(function(){d||l?g():v||(v=!0,f(g))}),n.onError,n.requiresObservable);function g(){if(v=!1,!y.isDisposed_){var t=!1;y.track((function(){var n=ze(!1,(function(){return e(y)}));t=d||!p(s,n),_=s,s=n})),(d&&n.fireImmediately||!d&&t)&&c(s,_,y),d=!1}}return y.schedule_(),y.getDisposer_()}function on(e,t,n){return sn("onBO",e,t,n)}function an(e,t,n){return sn("onBUO",e,t,n)}function sn(e,t,n,r){var i="function"==typeof r?Yr(t,n):Yr(t),o=m(r)?r:n,a=e+"L";return i[a]?i[a].add(o):i[a]=new Set([o]),function(){var e=i[a];e&&(e.delete(o),0===e.size&&delete i[a])}}var un="always";function cn(e){!0===e.isolateGlobalState&&function(){if((yt.pendingReactions.length||yt.inBatch||yt.isRunningReactions)&&i(36),bt=!0,pt){var e=a();0==--e.__mobxInstanceCount&&(e.__mobxGlobals=void 0),yt=new _t}}();var t,n,r=e.useProxies,o=e.enforceActions;if(void 0!==r&&(yt.useProxies=r===un||"never"!==r&&"undefined"!=typeof Proxy),"ifavailable"===r&&(yt.verifyProxies=!0),void 0!==o){var s=o===un?un:"observed"===o;yt.enforceActions=s,yt.allowStateChanges=!0!==s&&s!==un}["computedRequiresReaction","reactionRequiresObservable","observableRequiresReaction","disableErrorBoundaries","safeDescriptors"].forEach((function(t){t in e&&(yt[t]=!!e[t])})),yt.allowStateReads=!yt.observableRequiresReaction,!0===yt.disableErrorBoundaries&&console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled."),e.reactionScheduler&&(t=e.reactionScheduler,n=Pt,Pt=function(e){return t((function(){return n(e)}))})}function ln(e,t,n,r){arguments.length>4&&i("'extendObservable' expected 2-4 arguments"),"object"!=typeof e&&i("'extendObservable' expects an object as first argument"),kr(e)&&i("'extendObservable' should not be used on maps, use map.merge instead"),A(t)||i("'extendObservabe' only accepts plain objects as second argument"),(Cn(t)||Cn(n))&&i("Extending an object with another observable (object) is not supported");var o=V(t),a=Vr(e,r)[W];St();try{R(o).forEach((function(e){a.extend_(e,o[e],!n||(!(e in n)||n[e]))}))}finally{xt()}return e}function fn(e,t){return hn(Yr(e,t))}function hn(e){var t,n={name:e.name_};return e.observing_&&e.observing_.length>0&&(n.dependencies=(t=e.observing_,Array.from(new Set(t))).map(hn)),n}function dn(e,t){return vn(Yr(e,t))}function vn(e){var t={name:e.name_};return function(e){return e.observers_&&e.observers_.size>0}(e)&&(t.observers=Array.from(function(e){return e.observers_}(e)).map(vn)),t}var _n=0;function pn(){this.message="FLOW_CANCELLED"}function bn(e){return e instanceof pn}pn.prototype=Object.create(Error.prototype);var yn=ae("flow"),gn=ae("flow.bound",{bound:!0}),mn=Object.assign((function(e,t){if(O(t))return z(e,t,yn);1!==arguments.length&&i("Flow expects single argument with generator function");var n=e,r=n.name||"<unnamed flow>",o=function(){var e,t=this,i=arguments,o=++_n,a=Jt(r+" - runid: "+o+" - init",n).apply(t,i),s=void 0,u=new Promise((function(t,n){var i=0;function u(e){var t;s=void 0;try{t=Jt(r+" - runid: "+o+" - yield "+i++,a.next).call(a,e)}catch(e){return n(e)}l(t)}function c(e){var t;s=void 0;try{t=Jt(r+" - runid: "+o+" - yield "+i++,a.throw).call(a,e)}catch(e){return n(e)}l(t)}function l(e){if(!m(null==e?void 0:e.then))return e.done?t(e.value):(s=Promise.resolve(e.value)).then(u,c);e.then(l,n)}e=n,u(void 0)}));return u.cancel=Jt(r+" - runid: "+o+" - cancel",(function(){try{s&&On(s);var t=a.return(void 0),n=Promise.resolve(t.value);n.then(g,g),On(n),e(new pn)}catch(t){e(t)}})),u};return o.isMobXFlow=!0,o}),yn);function On(e){m(e.cancel)&&e.cancel()}function wn(e){return e}function An(e){return!0===(null==e?void 0:e.isMobXFlow)}function Sn(e,t,n){var r;if(kr(e)||Or(e)||Je(e))r=Jr(e);else{if(!Ir(e))return i("Expected observable map, object or array as first array");if(!O(t))return i("InterceptReads can only be used with a specific property, not with an object in general");r=Jr(e,t)}return void 0!==r.dehancer?i("An intercept reader was already established"):(r.dehancer="function"==typeof t?t:n,function(){r.dehancer=void 0})}function xn(e,t,n){return m(n)?function(e,t,n){return Jr(e,t).intercept_(n)}(e,t,n):function(e,t){return Jr(e).intercept_(t)}(e,t)}function jn(e,t){if(void 0!==t){if(!1===Ir(e))return!1;if(!e[W].values_.has(t))return!1;var n=Yr(e,t);return et(n)}return et(e)}function En(e){return arguments.length>1?i("isComputed expects only 1 argument. Use isComputedProp to inspect the observability of a property"):jn(e)}function kn(e,t){return O(t)?jn(e,t):i("isComputed expected a property name as second argument")}function Tn(e,t){return!!e&&(void 0!==t?kr(e)||Or(e)?i("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead."):!!Ir(e)&&e[W].values_.has(t):Ir(e)||!!e[W]||F(e)||Vt(e)||et(e))}function Cn(e){return 1!==arguments.length&&i("isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property"),Tn(e)}function Rn(e,t){return O(t)?Tn(e,t):i("expected a property name as second argument")}function Pn(e){return Ir(e)?e[W].keys_():kr(e)||Rr(e)?Array.from(e.keys()):Or(e)?e.map((function(e,t){return t})):void i(5)}function Nn(e){return Ir(e)?Pn(e).map((function(t){return e[t]})):kr(e)?Pn(e).map((function(t){return e.get(t)})):Rr(e)?Array.from(e.values()):Or(e)?e.slice():void i(6)}function Dn(e){return Ir(e)?Pn(e).map((function(t){return[t,e[t]]})):kr(e)?Pn(e).map((function(t){return[t,e.get(t)]})):Rr(e)?Array.from(e.entries()):Or(e)?e.map((function(e,t){return[t,e]})):void i(7)}function Vn(e,t,n){if(2!==arguments.length||Rr(e))Ir(e)?e[W].set_(t,n):kr(e)?e.set(t,n):Rr(e)?e.add(t):Or(e)?("number"!=typeof t&&(t=parseInt(t,10)),t<0&&i("Invalid index: '"+t+"'"),St(),t>=e.length&&(e.length=t+1),e[t]=n,xt()):i(8);else{St();var r=t;try{for(var o in r)Vn(e,o,r[o])}finally{xt()}}}function Ln(e,t){Ir(e)?e[W].delete_(t):kr(e)||Rr(e)?e.delete(t):Or(e)?("number"!=typeof t&&(t=parseInt(t,10)),e.splice(t,1)):i(9)}function Bn(e,t){return Ir(e)?e[W].has_(t):kr(e)||Rr(e)?e.has(t):Or(e)?t>=0&&t<e.length:void i(10)}function In(e,t){if(Bn(e,t))return Ir(e)?e[W].get_(t):kr(e)?e.get(t):Or(e)?e[t]:void i(11)}function Mn(e,t,n){if(Ir(e))return e[W].defineProperty_(t,n);i(39)}function Un(e){if(Ir(e))return e[W].ownKeys_();i(38)}function Kn(e,t,n,r){return m(n)?function(e,t,n,r){return Jr(e,t).observe_(n,r)}(e,t,n,r):function(e,t,n){return Jr(e).observe_(t,n)}(e,t,n)}function Gn(e,t,n){return e.set(t,n),n}function qn(e,t){if(null==e||"object"!=typeof e||e instanceof Date||!Cn(e))return e;if(Je(e)||et(e))return qn(e.get(),t);if(t.has(e))return t.get(e);if(Or(e)){var n=Gn(t,e,new Array(e.length));return e.forEach((function(e,r){n[r]=qn(e,t)})),n}if(Rr(e)){var r=Gn(t,e,new Set);return e.forEach((function(e){r.add(qn(e,t))})),r}if(kr(e)){var i=Gn(t,e,new Map);return e.forEach((function(e,n){i.set(n,qn(e,t))})),i}var o=Gn(t,e,{});return Un(e).forEach((function(n){l.propertyIsEnumerable.call(e,n)&&(o[n]=qn(e[n],t))})),o}function Hn(e,t){return t&&i("toJS no longer supports options"),qn(e,new Map)}function zn(){for(var e=!1,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];"boolean"==typeof n[n.length-1]&&(e=n.pop());var o=Wn(n);if(!o)return i("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");o.isTracing_===Qe.NONE&&console.log("[mobx.trace] '"+o.name_+"' tracing enabled"),o.isTracing_=e?Qe.BREAK:Qe.LOG}function Wn(e){switch(e.length){case 0:return yt.trackingDerivation;case 1:return Yr(e[0]);case 2:return Yr(e[0],e[1])}}function Xn(e,t){void 0===t&&(t=void 0),St();try{return e.apply(t)}finally{xt()}}function Fn(e,t,n){return 1===arguments.length||t&&"object"==typeof t?Jn(e,t):Yn(e,t,n||{})}function Yn(e,t,n){var r;if("number"==typeof n.timeout){var i=new Error("WHEN_TIMEOUT");r=setTimeout((function(){if(!a[W].isDisposed_){if(a(),!n.onError)throw i;n.onError(i)}}),n.timeout)}n.name=n.name||"When@"+b();var o=Ke(n.name+"-effect",t),a=en((function(t){ze(!1,e)&&(t.dispose(),r&&clearTimeout(r),o())}),n);return a}function Jn(e,t){if(t&&t.onError)return i("the options 'onError' and 'promise' cannot be combined");var n,r=new Promise((function(r,i){var o=Yn(e,r,I({},t,{onError:i}));n=function(){o(),i("WHEN_CANCELLED")}}));return r.cancel=n,r}function $n(e){return e[W]}mn.bound=H(gn);var Qn={has:function(e,t){return yt.trackingDerivation&&p("detect new properties using the 'in' operator. Use 'has' from 'mobx' instead."),$n(e).has_(t)},get:function(e,t){return $n(e).get_(t)},set:function(e,t,n){var r;return!!O(t)&&($n(e).values_.has(t)||p("add a new observable property through direct assignment. Use 'set' from 'mobx' instead."),null==(r=$n(e).set_(t,n,!0))||r)},deleteProperty:function(e,t){var n;return p("delete properties from an observable object. Use 'remove' from 'mobx' instead."),!!O(t)&&(null==(n=$n(e).delete_(t,!0))||n)},defineProperty:function(e,t,n){var r;return p("define property on an observable object. Use 'defineProperty' from 'mobx' instead."),null==(r=$n(e).defineProperty_(t,n))||r},ownKeys:function(e){return yt.trackingDerivation&&p("iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead."),$n(e).ownKeys_()},preventExtensions:function(e){i(13)}};function Zn(e){return void 0!==e.interceptors_&&e.interceptors_.length>0}function er(e,t){var n=e.interceptors_||(e.interceptors_=[]);return n.push(t),y((function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}))}function tr(e,t){var n=ct();try{for(var r=[].concat(e.interceptors_||[]),o=0,a=r.length;o<a&&((t=r[o](t))&&!t.type&&i(14),t);o++);return t}finally{lt(n)}}function nr(e){return void 0!==e.changeListeners_&&e.changeListeners_.length>0}function rr(e,t){var n=e.changeListeners_||(e.changeListeners_=[]);return n.push(t),y((function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}))}function ir(e,t){var n=ct(),r=e.changeListeners_;if(r){for(var i=0,o=(r=r.slice()).length;i<o;i++)r[i](t);lt(n)}}function or(e,t,n){var r=Vr(e,n)[W];St();try{null!=t||(t=function(e){return D(e,q)||(e[q]||i("No annotations were passed to makeObservable, but no decorated members have been found either"),x(e,q,I({},e[q]))),e[q]}(e)),R(t).forEach((function(e){return r.make_(e,t[e])}))}finally{xt()}return e}var ar=Symbol("mobx-keys");function sr(e,t,n){if(A(e)||A(Object.getPrototypeOf(e))||i("'makeAutoObservable' can only be used for classes that don't have a superclass"),Ir(e)&&i("makeAutoObservable can only be used on objects not already made observable"),A(e))return ln(e,e,t,n);var r=Vr(e,n)[W];if(!e[ar]){var o=Object.getPrototypeOf(e),a=new Set([].concat(R(e),R(o)));a.delete("constructor"),a.delete(W),x(o,ar,a)}St();try{e[ar].forEach((function(e){return r.make_(e,!t||(!(e in t)||t[e]))}))}finally{xt()}return e}var ur="splice",cr="update",lr={get:function(e,t){var n=e[W];return t===W?n:"length"===t?n.getArrayLength_():"string"!=typeof t||isNaN(t)?D(dr,t)?dr[t]:e[t]:n.get_(parseInt(t))},set:function(e,t,n){var r=e[W];return"length"===t&&r.setArrayLength_(n),"symbol"==typeof t||isNaN(t)?e[t]=n:r.set_(parseInt(t),n),!0},preventExtensions:function(){i(15)}},fr=function(){function e(e,t,n,r){void 0===e&&(e="ObservableArray@"+b()),this.owned_=void 0,this.legacyMode_=void 0,this.atom_=void 0,this.values_=[],this.interceptors_=void 0,this.changeListeners_=void 0,this.enhancer_=void 0,this.dehancer=void 0,this.proxy_=void 0,this.lastKnownLength_=0,this.owned_=n,this.legacyMode_=r,this.atom_=new X(e),this.enhancer_=function(n,r){return t(n,r,e+"[..]")}}var t=e.prototype;return t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.dehanceValues_=function(e){return void 0!==this.dehancer&&e.length>0?e.map(this.dehancer):e},t.intercept_=function(e){return er(this,e)},t.observe_=function(e,t){return void 0===t&&(t=!1),t&&e({observableKind:"array",object:this.proxy_,debugObjectName:this.atom_.name_,type:"splice",index:0,added:this.values_.slice(),addedCount:this.values_.length,removed:[],removedCount:0}),rr(this,e)},t.getArrayLength_=function(){return this.atom_.reportObserved(),this.values_.length},t.setArrayLength_=function(e){("number"!=typeof e||e<0)&&i("Out of range: "+e);var t=this.values_.length;if(e!==t)if(e>t){for(var n=new Array(e-t),r=0;r<e-t;r++)n[r]=void 0;this.spliceWithArray_(t,0,n)}else this.spliceWithArray_(e,t-e)},t.updateArrayLength_=function(e,t){e!==this.lastKnownLength_&&i(16),this.lastKnownLength_+=t,this.legacyMode_&&t>0&&Xr(e+t+1)},t.spliceWithArray_=function(e,t,n){var r=this;ot(this.atom_);var i=this.values_.length;if(void 0===e?e=0:e>i?e=i:e<0&&(e=Math.max(0,i+e)),t=1===arguments.length?i-e:null==t?0:Math.max(0,Math.min(t,i-e)),void 0===n&&(n=f),Zn(this)){var o=tr(this,{object:this.proxy_,type:ur,index:e,removedCount:t,added:n});if(!o)return f;t=o.removedCount,n=o.added}n=0===n.length?n:n.map((function(e){return r.enhancer_(e,void 0)})),this.legacyMode_;var a=n.length-t;this.updateArrayLength_(i,a);var s=this.spliceItemsIntoValues_(e,t,n);return 0===t&&0===n.length||this.notifyArraySplice_(e,n,s),this.dehanceValues_(s)},t.spliceItemsIntoValues_=function(e,t,n){var r;if(n.length<1e4)return(r=this.values_).splice.apply(r,[e,t].concat(n));var i=this.values_.slice(e,e+t),o=this.values_.slice(e+t);this.values_.length=e+n.length-t;for(var a=0;a<n.length;a++)this.values_[e+a]=n[a];for(var s=0;s<o.length;s++)this.values_[e+n.length+s]=o[s];return i},t.notifyArrayChildUpdate_=function(e,t,n){var r=!this.owned_&&Lt(),i=nr(this),o=i||r?{observableKind:"array",object:this.proxy_,type:cr,debugObjectName:this.atom_.name_,index:e,newValue:t,oldValue:n}:null;r&&It(o),this.atom_.reportChanged(),i&&ir(this,o),r&&Ut()},t.notifyArraySplice_=function(e,t,n){var r=!this.owned_&&Lt(),i=nr(this),o=i||r?{observableKind:"array",object:this.proxy_,debugObjectName:this.atom_.name_,type:ur,index:e,removed:n,added:t,removedCount:n.length,addedCount:t.length}:null;r&&It(o),this.atom_.reportChanged(),i&&ir(this,o),r&&Ut()},t.get_=function(e){if(e<this.values_.length)return this.atom_.reportObserved(),this.dehanceValue_(this.values_[e]);console.warn("[mobx] Out of bounds read: "+e)},t.set_=function(e,t){var n=this.values_;if(e<n.length){ot(this.atom_);var r=n[e];if(Zn(this)){var o=tr(this,{type:cr,object:this.proxy_,index:e,newValue:t});if(!o)return;t=o.newValue}(t=this.enhancer_(t,r))!==r&&(n[e]=t,this.notifyArrayChildUpdate_(e,t,r))}else e===n.length?this.spliceWithArray_(e,0,[t]):i(17,e,n.length)},e}();function hr(e,t,n,r){void 0===n&&(n="ObservableArray@"+b()),void 0===r&&(r=!1),_();var i=new fr(n,t,r,!1);j(i.values_,W,i);var o=new Proxy(i.values_,lr);if(i.proxy_=o,e&&e.length){var a=We(!0);i.spliceWithArray_(0,0,e),Xe(a)}return o}var dr={clear:function(){return this.splice(0)},replace:function(e){var t=this[W];return t.spliceWithArray_(0,t.values_.length,e)},toJSON:function(){return this.slice()},splice:function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),i=2;i<n;i++)r[i-2]=arguments[i];var o=this[W];switch(arguments.length){case 0:return[];case 1:return o.spliceWithArray_(e);case 2:return o.spliceWithArray_(e,t)}return o.spliceWithArray_(e,t,r)},spliceWithArray:function(e,t,n){return this[W].spliceWithArray_(e,t,n)},push:function(){for(var e=this[W],t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.spliceWithArray_(e.values_.length,0,n),e.values_.length},pop:function(){return this.splice(Math.max(this[W].values_.length-1,0),1)[0]},shift:function(){return this.splice(0,1)[0]},unshift:function(){for(var e=this[W],t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.spliceWithArray_(0,0,n),e.values_.length},reverse:function(){return yt.trackingDerivation&&i(37,"reverse"),this.replace(this.slice().reverse()),this},sort:function(){yt.trackingDerivation&&i(37,"sort");var e=this.slice();return e.sort.apply(e,arguments),this.replace(e),this},remove:function(e){var t=this[W],n=t.dehanceValues_(t.values_).indexOf(e);return n>-1&&(this.splice(n,1),!0)}};function vr(e,t){"function"==typeof Array.prototype[e]&&(dr[e]=t(e))}function _r(e){return function(){var t=this[W];t.atom_.reportObserved();var n=t.dehanceValues_(t.values_);return n[e].apply(n,arguments)}}function pr(e){return function(t,n){var r=this,i=this[W];return i.atom_.reportObserved(),i.dehanceValues_(i.values_)[e]((function(e,i){return t.call(n,e,i,r)}))}}function br(e){return function(){var t=this,n=this[W];n.atom_.reportObserved();var r=n.dehanceValues_(n.values_),i=arguments[0];return arguments[0]=function(e,n,r){return i(e,n,r,t)},r[e].apply(r,arguments)}}vr("concat",_r),vr("flat",_r),vr("includes",_r),vr("indexOf",_r),vr("join",_r),vr("lastIndexOf",_r),vr("slice",_r),vr("toString",_r),vr("toLocaleString",_r),vr("every",pr),vr("filter",pr),vr("find",pr),vr("findIndex",pr),vr("flatMap",pr),vr("forEach",pr),vr("map",pr),vr("some",pr),vr("reduce",br),vr("reduceRight",br);var yr,gr,mr=E("ObservableArrayAdministration",fr);function Or(e){return w(e)&&mr(e[W])}var wr={},Ar="add",Sr="delete";yr=Symbol.iterator,gr=Symbol.toStringTag;var xr,jr,Er=function(){function e(e,t,n){void 0===t&&(t=$),void 0===n&&(n="ObservableMap@"+b()),this.enhancer_=void 0,this.name_=void 0,this[W]=wr,this.data_=void 0,this.hasMap_=void 0,this.keysAtom_=void 0,this.interceptors_=void 0,this.changeListeners_=void 0,this.dehancer=void 0,this.enhancer_=t,this.name_=n,m(Map)||i(18),this.keysAtom_=Y(this.name_+".keys()"),this.data_=new Map,this.hasMap_=new Map,this.merge(e)}var t=e.prototype;return t.has_=function(e){return this.data_.has(e)},t.has=function(e){var t=this;if(!yt.trackingDerivation)return this.has_(e);var n=this.hasMap_.get(e);if(!n){var r=n=new Ye(this.has_(e),Q,this.name_+"."+P(e)+"?",!1);this.hasMap_.set(e,r),an(r,(function(){return t.hasMap_.delete(e)}))}return n.get()},t.set=function(e,t){var n=this.has_(e);if(Zn(this)){var r=tr(this,{type:n?cr:Ar,object:this,newValue:t,name:e});if(!r)return this;t=r.newValue}return n?this.updateValue_(e,t):this.addValue_(e,t),this},t.delete=function(e){var t=this;if((ot(this.keysAtom_),Zn(this))&&!tr(this,{type:Sr,object:this,name:e}))return!1;if(this.has_(e)){var n=Lt(),r=nr(this),i=r||n?{observableKind:"map",debugObjectName:this.name_,type:Sr,object:this,oldValue:this.data_.get(e).value_,name:e}:null;return n&&It(i),Xn((function(){t.keysAtom_.reportChanged(),t.updateHasMapEntry_(e,!1),t.data_.get(e).setNewValue_(void 0),t.data_.delete(e)})),r&&ir(this,i),n&&Ut(),!0}return!1},t.updateHasMapEntry_=function(e,t){var n=this.hasMap_.get(e);n&&n.setNewValue_(t)},t.updateValue_=function(e,t){var n=this.data_.get(e);if((t=n.prepareNewValue_(t))!==yt.UNCHANGED){var r=Lt(),i=nr(this),o=i||r?{observableKind:"map",debugObjectName:this.name_,type:cr,object:this,oldValue:n.value_,name:e,newValue:t}:null;r&&It(o),n.setNewValue_(t),i&&ir(this,o),r&&Ut()}},t.addValue_=function(e,t){var n=this;ot(this.keysAtom_),Xn((function(){var r=new Ye(t,n.enhancer_,n.name_+"."+P(e),!1);n.data_.set(e,r),t=r.value_,n.updateHasMapEntry_(e,!0),n.keysAtom_.reportChanged()}));var r=Lt(),i=nr(this),o=i||r?{observableKind:"map",debugObjectName:this.name_,type:Ar,object:this,name:e,newValue:t}:null;r&&It(o),i&&ir(this,o),r&&Ut()},t.get=function(e){return this.has(e)?this.dehanceValue_(this.data_.get(e).get()):this.dehanceValue_(void 0)},t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.keys=function(){return this.keysAtom_.reportObserved(),this.data_.keys()},t.values=function(){var e=this,t=this.keys();return ni({next:function(){var n=t.next(),r=n.done,i=n.value;return{done:r,value:r?void 0:e.get(i)}}})},t.entries=function(){var e=this,t=this.keys();return ni({next:function(){var n=t.next(),r=n.done,i=n.value;return{done:r,value:r?void 0:[i,e.get(i)]}}})},t[yr]=function(){return this.entries()},t.forEach=function(e,t){for(var n,r=G(this);!(n=r()).done;){var i=n.value,o=i[0],a=i[1];e.call(t,a,o,this)}},t.merge=function(e){var t=this;return kr(e)&&(e=new Map(e)),Xn((function(){A(e)?function(e){var t=Object.keys(e);if(!C)return t;var n=Object.getOwnPropertySymbols(e);return n.length?[].concat(t,n.filter((function(t){return l.propertyIsEnumerable.call(e,t)}))):t}(e).forEach((function(n){return t.set(n,e[n])})):Array.isArray(e)?e.forEach((function(e){var n=e[0],r=e[1];return t.set(n,r)})):k(e)?(e.constructor!==Map&&i(19,e),e.forEach((function(e,n){return t.set(n,e)}))):null!=e&&i(20,e)})),this},t.clear=function(){var e=this;Xn((function(){ut((function(){for(var t,n=G(e.keys());!(t=n()).done;){var r=t.value;e.delete(r)}}))}))},t.replace=function(e){var t=this;return Xn((function(){for(var n,r=function(e){if(k(e)||kr(e))return e;if(Array.isArray(e))return new Map(e);if(A(e)){var t=new Map;for(var n in e)t.set(n,e[n]);return t}return i(21,e)}(e),o=new Map,a=!1,s=G(t.data_.keys());!(n=s()).done;){var u=n.value;if(!r.has(u))if(t.delete(u))a=!0;else{var c=t.data_.get(u);o.set(u,c)}}for(var l,f=G(r.entries());!(l=f()).done;){var h=l.value,d=h[0],v=h[1],_=t.data_.has(d);if(t.set(d,v),t.data_.has(d)){var p=t.data_.get(d);o.set(d,p),_||(a=!0)}}if(!a)if(t.data_.size!==o.size)t.keysAtom_.reportChanged();else for(var b=t.data_.keys(),y=o.keys(),g=b.next(),m=y.next();!g.done;){if(g.value!==m.value){t.keysAtom_.reportChanged();break}g=b.next(),m=y.next()}t.data_=o})),this},t.toString=function(){return"[object ObservableMap]"},t.toJSON=function(){return Array.from(this)},t.observe_=function(e,t){return!0===t&&i("`observe` doesn't support fireImmediately=true in combination with maps."),rr(this,e)},t.intercept_=function(e){return er(this,e)},B(e,[{key:"size",get:function(){return this.keysAtom_.reportObserved(),this.data_.size}},{key:gr,get:function(){return"Map"}}]),e}(),kr=E("ObservableMap",Er);var Tr={};xr=Symbol.iterator,jr=Symbol.toStringTag;var Cr=function(){function e(e,t,n){void 0===t&&(t=$),void 0===n&&(n="ObservableSet@"+b()),this.name_=void 0,this[W]=Tr,this.data_=new Set,this.atom_=void 0,this.changeListeners_=void 0,this.interceptors_=void 0,this.dehancer=void 0,this.enhancer_=void 0,this.name_=n,m(Set)||i(22),this.atom_=Y(this.name_),this.enhancer_=function(e,r){return t(e,r,n)},e&&this.replace(e)}var t=e.prototype;return t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.clear=function(){var e=this;Xn((function(){ut((function(){for(var t,n=G(e.data_.values());!(t=n()).done;){var r=t.value;e.delete(r)}}))}))},t.forEach=function(e,t){for(var n,r=G(this);!(n=r()).done;){var i=n.value;e.call(t,i,i,this)}},t.add=function(e){var t=this;if((ot(this.atom_),Zn(this))&&!tr(this,{type:Ar,object:this,newValue:e}))return this;if(!this.has(e)){Xn((function(){t.data_.add(t.enhancer_(e,void 0)),t.atom_.reportChanged()}));var n=Lt(),r=nr(this),i=r||n?{observableKind:"set",debugObjectName:this.name_,type:Ar,object:this,newValue:e}:null;n&&It(i),r&&ir(this,i),n&&Ut()}return this},t.delete=function(e){var t=this;if(Zn(this)&&!tr(this,{type:Sr,object:this,oldValue:e}))return!1;if(this.has(e)){var n=Lt(),r=nr(this),i=r||n?{observableKind:"set",debugObjectName:this.name_,type:Sr,object:this,oldValue:e}:null;return n&&It(i),Xn((function(){t.atom_.reportChanged(),t.data_.delete(e)})),r&&ir(this,i),n&&Ut(),!0}return!1},t.has=function(e){return this.atom_.reportObserved(),this.data_.has(this.dehanceValue_(e))},t.entries=function(){var e=0,t=Array.from(this.keys()),n=Array.from(this.values());return ni({next:function(){var r=e;return e+=1,r<n.length?{value:[t[r],n[r]],done:!1}:{done:!0}}})},t.keys=function(){return this.values()},t.values=function(){this.atom_.reportObserved();var e=this,t=0,n=Array.from(this.data_.values());return ni({next:function(){return t<n.length?{value:e.dehanceValue_(n[t++]),done:!1}:{done:!0}}})},t.replace=function(e){var t=this;return Rr(e)&&(e=new Set(e)),Xn((function(){Array.isArray(e)||T(e)?(t.clear(),e.forEach((function(e){return t.add(e)}))):null!=e&&i("Cannot initialize set from "+e)})),this},t.observe_=function(e,t){return!0===t&&i("`observe` doesn't support fireImmediately=true in combination with sets."),rr(this,e)},t.intercept_=function(e){return er(this,e)},t.toJSON=function(){return Array.from(this)},t.toString=function(){return"[object ObservableSet]"},t[xr]=function(){return this.values()},B(e,[{key:"size",get:function(){return this.atom_.reportObserved(),this.data_.size}},{key:jr,get:function(){return"Set"}}]),e}(),Rr=E("ObservableSet",Cr),Pr=Object.create(null),Nr="remove",Dr=function(){function e(e,t,n,r){void 0===t&&(t=new Map),void 0===r&&(r=pe),this.target_=void 0,this.values_=void 0,this.name_=void 0,this.defaultAnnotation_=void 0,this.keysAtom_=void 0,this.changeListeners_=void 0,this.interceptors_=void 0,this.proxy_=void 0,this.isPlainObject_=void 0,this.appliedAnnotations_=void 0,this.pendingKeys_=void 0,this.target_=e,this.values_=t,this.name_=n,this.defaultAnnotation_=r,this.keysAtom_=new X(this.name_+".keys"),this.isPlainObject_=A(this.target_),ii(this.defaultAnnotation_)||i("defaultAnnotation must be valid annotation"),this.appliedAnnotations_={}}var t=e.prototype;return t.getObservablePropValue_=function(e){return this.values_.get(e).get()},t.setObservablePropValue_=function(e,t){var n=this.values_.get(e);if(n instanceof Ze)return n.set(t),!0;if(Zn(this)){var r=tr(this,{type:cr,object:this.proxy_||this.target_,name:e,newValue:t});if(!r)return null;t=r.newValue}if((t=n.prepareNewValue_(t))!==yt.UNCHANGED){var i=nr(this),o=Lt(),a=i||o?{type:cr,observableKind:"object",debugObjectName:this.name_,object:this.proxy_||this.target_,oldValue:n.value_,name:e,newValue:t}:null;o&&It(a),n.setNewValue_(t),i&&ir(this,a),o&&Ut()}return!0},t.get_=function(e){return yt.trackingDerivation&&!D(this.target_,e)&&this.has_(e),this.target_[e]},t.set_=function(e,t,n){return void 0===n&&(n=!1),D(this.target_,e)?this.values_.has(e)?this.setObservablePropValue_(e,t):n?Reflect.set(this.target_,e,t):(this.target_[e]=t,!0):this.extend_(e,{value:t,enumerable:!0,writable:!0,configurable:!0},this.defaultAnnotation_,n)},t.has_=function(e){if(!yt.trackingDerivation)return e in this.target_;this.pendingKeys_||(this.pendingKeys_=new Map);var t=this.pendingKeys_.get(e);return t||(t=new Ye(e in this.target_,Q,this.name_+"."+P(e)+"?",!1),this.pendingKeys_.set(e,t)),t.get()},t.make_=function(e,t){if(!0===t&&(t=this.defaultAnnotation_),!1!==t){if(Ur(this,t,e),!(e in this.target_)){var n;if(null==(n=this.target_[q])?void 0:n[e])return;i(1,t.annotationType_,this.name_+"."+e.toString())}for(var r=this.target_;r&&r!==l;){var o=u(r,e);if(o){var a=t.make_(this,e,o,r);if(0===a)return;if(1===a)break}r=Object.getPrototypeOf(r)}Mr(this,t,e)}},t.extend_=function(e,t,n,r){if(void 0===r&&(r=!1),!0===n&&(n=this.defaultAnnotation_),!1===n)return this.defineProperty_(e,t,r);Ur(this,n,e);var i=n.extend_(this,e,t,r);return i&&Mr(this,n,e),i},t.defineProperty_=function(e,t,n){void 0===n&&(n=!1);try{St();var r=this.delete_(e);if(!r)return r;if(Zn(this)){var i=tr(this,{object:this.proxy_||this.target_,name:e,type:Ar,newValue:t.value});if(!i)return null;var o=i.newValue;t.value!==o&&(t=I({},t,{value:o}))}if(n){if(!Reflect.defineProperty(this.target_,e,t))return!1}else c(this.target_,e,t);this.notifyPropertyAddition_(e,t.value)}finally{xt()}return!0},t.defineObservableProperty_=function(e,t,n,r){void 0===r&&(r=!1);try{St();var i=this.delete_(e);if(!i)return i;if(Zn(this)){var o=tr(this,{object:this.proxy_||this.target_,name:e,type:Ar,newValue:t});if(!o)return null;t=o.newValue}var a=Br(e),s={configurable:!yt.safeDescriptors||this.isPlainObject_,enumerable:!0,get:a.get,set:a.set};if(r){if(!Reflect.defineProperty(this.target_,e,s))return!1}else c(this.target_,e,s);var u=new Ye(t,n,this.name_+"."+e.toString(),!1);this.values_.set(e,u),this.notifyPropertyAddition_(e,u.value_)}finally{xt()}return!0},t.defineComputedProperty_=function(e,t,n){void 0===n&&(n=!1);try{St();var r=this.delete_(e);if(!r)return r;if(Zn(this))if(!tr(this,{object:this.proxy_||this.target_,name:e,type:Ar,newValue:void 0}))return null;t.name||(t.name=this.name_+"."+e.toString()),t.context=this.proxy_||this.target_;var i=Br(e),o={configurable:!yt.safeDescriptors||this.isPlainObject_,enumerable:!1,get:i.get,set:i.set};if(n){if(!Reflect.defineProperty(this.target_,e,o))return!1}else c(this.target_,e,o);this.values_.set(e,new Ze(t)),this.notifyPropertyAddition_(e,void 0)}finally{xt()}return!0},t.delete_=function(e,t){if(void 0===t&&(t=!1),!D(this.target_,e))return!0;if(Zn(this)&&!tr(this,{object:this.proxy_||this.target_,name:e,type:Nr}))return null;try{var n,r;St();var i,o=nr(this),a=Lt(),s=this.values_.get(e),c=void 0;if(!s&&(o||a))c=null==(i=u(this.target_,e))?void 0:i.value;if(t){if(!Reflect.deleteProperty(this.target_,e))return!1}else delete this.target_[e];if(delete this.appliedAnnotations_[e],s&&(this.values_.delete(e),s instanceof Ye&&(c=s.value_),Et(s)),this.keysAtom_.reportChanged(),null==(n=this.pendingKeys_)||null==(r=n.get(e))||r.set(e in this.target_),o||a){var l={type:Nr,observableKind:"object",object:this.proxy_||this.target_,debugObjectName:this.name_,oldValue:c,name:e};a&&It(l),o&&ir(this,l),a&&Ut()}}finally{xt()}return!0},t.observe_=function(e,t){return!0===t&&i("`observe` doesn't support the fire immediately property for observable objects."),rr(this,e)},t.intercept_=function(e){return er(this,e)},t.notifyPropertyAddition_=function(e,t){var n,r,i=nr(this),o=Lt();if(i||o){var a=i||o?{type:Ar,observableKind:"object",debugObjectName:this.name_,object:this.proxy_||this.target_,name:e,newValue:t}:null;o&&It(a),i&&ir(this,a),o&&Ut()}null==(n=this.pendingKeys_)||null==(r=n.get(e))||r.set(!0),this.keysAtom_.reportChanged()},t.ownKeys_=function(){return this.keysAtom_.reportObserved(),R(this.target_)},t.keys_=function(){return this.keysAtom_.reportObserved(),Object.keys(this.target_)},e}();function Vr(e,t){var n;if(t&&Ir(e)&&i("Options can't be provided for already observable objects."),D(e,W))return Jr(e)instanceof Dr||i("Cannot convert '"+$r(e)+"' into observable object:\nThe target is already observable of different type.\nExtending builtins is not supported."),e;Object.isExtensible(e)||i("Cannot make the designated object observable; it is not extensible");var r=null!=(n=null==t?void 0:t.name)?n:(A(e)?"ObservableObject":e.constructor.name)+"@"+b(),o=new Dr(e,new Map,String(r),function(e){var t;return e?null!=(t=e.defaultDecorator)?t:be(e):void 0}(t));return x(e,W,o),e}var Lr=E("ObservableObjectAdministration",Dr);function Br(e){return Pr[e]||(Pr[e]={get:function(){return this[W].getObservablePropValue_(e)},set:function(t){return this[W].setObservablePropValue_(e,t)}})}function Ir(e){return!!w(e)&&Lr(e[W])}function Mr(e,t,n){var r;e.appliedAnnotations_[n]=t,null==(r=e.target_[q])||delete r[n]}function Ur(e,t,n){if(ii(t)||i("Cannot annotate '"+e.name_+"."+n.toString()+"': Invalid annotation."),!te(t)&&D(e.appliedAnnotations_,n)){var r=e.name_+"."+n.toString(),o=e.appliedAnnotations_[n].annotationType_;i("Cannot apply '"+t.annotationType_+"' to '"+r+"':\nThe field is already annotated with '"+o+"'.\nRe-annotating fields is not allowed.\nUse 'override' annotation for methods overriden by subclass.")}}var Kr,Gr,qr=0,Hr=function(){};Kr=Hr,Gr=Array.prototype,Object.setPrototypeOf?Object.setPrototypeOf(Kr.prototype,Gr):void 0!==Kr.prototype.__proto__?Kr.prototype.__proto__=Gr:Kr.prototype=Gr;var zr=function(e){function t(t,n,r,i){var o;void 0===r&&(r="ObservableArray@"+b()),void 0===i&&(i=!1),o=e.call(this)||this;var a=new fr(r,n,i,!0);if(a.proxy_=U(o),j(U(o),W,a),t&&t.length){var s=We(!0);o.spliceWithArray(0,0,t),Xe(s)}return o}M(t,e);var n=t.prototype;return n.concat=function(){this[W].atom_.reportObserved();for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Array.prototype.concat.apply(this.slice(),t.map((function(e){return Or(e)?e.slice():e})))},n[Symbol.iterator]=function(){var e=this,t=0;return ni({next:function(){return t<e.length?{value:e[t++],done:!1}:{done:!0,value:void 0}}})},B(t,[{key:"length",get:function(){return this[W].getArrayLength_()},set:function(e){this[W].setArrayLength_(e)}},{key:Symbol.toStringTag,get:function(){return"Array"}}]),t}(Hr);function Wr(e){c(zr.prototype,""+e,function(e){return{enumerable:!1,configurable:!0,get:function(){return this[W].get_(e)},set:function(t){this[W].set_(e,t)}}}(e))}function Xr(e){if(e>qr){for(var t=qr;t<e+100;t++)Wr(t);qr=e}}function Fr(e,t,n){return new zr(e,t,n)}function Yr(e,t){if("object"==typeof e&&null!==e){if(Or(e))return void 0!==t&&i(23),e[W].atom_;if(Rr(e))return e[W];if(kr(e)){if(void 0===t)return e.keysAtom_;var n=e.data_.get(t)||e.hasMap_.get(t);return n||i(25,t,$r(e)),n}if(Ir(e)){if(!t)return i(26);var r=e[W].values_.get(t);return r||i(27,t,$r(e)),r}if(F(e)||et(e)||Vt(e))return e}else if(m(e)&&Vt(e[W]))return e[W];i(28)}function Jr(e,t){return e||i(29),void 0!==t?Jr(Yr(e,t)):F(e)||et(e)||Vt(e)||kr(e)||Rr(e)?e:e[W]?e[W]:void i(24,e)}function $r(e,t){var n;if(void 0!==t)n=Yr(e,t);else{if(Zt(e))return e.name;n=Ir(e)||kr(e)||Rr(e)?Jr(e):Yr(e)}return n.name_}Object.entries(dr).forEach((function(e){var t=e[0],n=e[1];"concat"!==t&&x(zr.prototype,t,n)})),Xr(1e3);var Qr=l.toString;function Zr(e,t,n){return void 0===n&&(n=-1),ei(e,t,n)}function ei(e,t,n,r,i){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var o=typeof e;if(!m(o)&&"object"!==o&&"object"!=typeof t)return!1;var a=Qr.call(e);if(a!==Qr.call(t))return!1;switch(a){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(e)===Symbol.valueOf.call(t);case"[object Map]":case"[object Set]":n>=0&&n++}e=ti(e),t=ti(t);var s="[object Array]"===a;if(!s){if("object"!=typeof e||"object"!=typeof t)return!1;var u=e.constructor,c=t.constructor;if(u!==c&&!(m(u)&&u instanceof u&&m(c)&&c instanceof c)&&"constructor"in e&&"constructor"in t)return!1}if(0===n)return!1;n<0&&(n=-1),i=i||[];for(var l=(r=r||[]).length;l--;)if(r[l]===e)return i[l]===t;if(r.push(e),i.push(t),s){if((l=e.length)!==t.length)return!1;for(;l--;)if(!ei(e[l],t[l],n-1,r,i))return!1}else{var f,h=Object.keys(e);if(l=h.length,Object.keys(t).length!==l)return!1;for(;l--;)if(!D(t,f=h[l])||!ei(e[f],t[f],n-1,r,i))return!1}return r.pop(),i.pop(),!0}function ti(e){return Or(e)?e.slice():k(e)||kr(e)||T(e)||Rr(e)?Array.from(e.entries()):e}function ni(e){return e[Symbol.iterator]=ri,e}function ri(){return this}function ii(e){return e instanceof Object&&"string"==typeof e.annotationType_&&m(e.make_)&&m(e.extend_)}["Symbol","Map","Set"].forEach((function(e){void 0===a()[e]&&i("MobX requires global '"+e+"' to be available or polyfilled")})),"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:Kt,extras:{getDebugName:$r},$mobx:W})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,